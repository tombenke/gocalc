# https://taskfile.dev

version: 3

vars:
  APPNAME: gocalc

  BUILD_TAGS: -tags DEBUG

  GIT_HOOKS_DIR:
    sh: sh -c 'echo "$(pwd)/.git/hooks"'

env:
  GOPRIVATE: github.com/tombenke

dotenv:
  - .local.env
  - .secrets
  - .test.env

tasks:
  default:
    desc: Executes all the tests then build the binary.
    cmds:
      - task: format
      - task: lint
      - task: test
      - task: docs

  pre-commit:
    desc: Runs the QA tasks from a git pre-commit hook
    cmds:
      - task: lint
      - task: test

  clean:
    desc: Clean temporary files and folders
    cmds:
      - rm c.out

  install-on-ci:
    desc: Install on CI
    cmds:
      - task: install

  install:
    desc: Install dependencies
    cmds:
      - sh -c "$(curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh)" -- -b $(go env GOPATH)/bin v1.64.5
      - go install golang.org/x/pkgsite/cmd/pkgsite@latest
      - git submodule init
      - git submodule update
      - go mod tidy
      - task: install-git-hooks

  install-git-hooks:
    desc: Install git hooks
    cmds:
      - mkdir -p {{.GIT_HOOKS_DIR}}
      - echo -e "#!/bin/bash\ntask pre-commit" > {{.GIT_HOOKS_DIR}}/pre-commit
      - chmod ug+x {{.GIT_HOOKS_DIR}}/pre-commit

  format:
    desc: Autoformat the source files
    cmds:
      - gofmt -w .

  lint-display:
    desc: Call gofmt, go vet and go lint
    cmds:
      - go vet ./...
      - golangci-lint run

  lint:
    desc: Test gofmt, go vet and go lint
    cmds:
      - test -z $(gofmt -d .)
      - test -z $(go vet ./...)
      - golangci-lint run

  test:
    desc: Run all the go tests
    cmds:
      - go test -count=1 {{.BUILD_TAGS}} ./...

  test-verbose:
    desc: Run all the go tests in verbose mode
    cmds:
      - go test -v -count=1 {{.BUILD_TAGS}} ./...

  test-single:
    desc: Run all the go tests in verbose mode from a single test file
    cmds:
      - go test -v -count=1  -run={{.CLI_ARGS}} {{.BUILD_TAGS}} ./...

  benchmark:
    desc: Run benchmark tests (INACCURATE, run directly from cli!)
    cmds:
      - go test -bench=. -count=10 ./...

  coverage:
    desc: Open test coverage in browser
    cmds:
      - go test -coverprofile=c.out -covermode=atomic ./...
      - go tool cover -html=c.out

  generate-diagrams:
    desc: Generate diagrams of AST trees and code blocks out of the code examples found in the test cases
    cmds:
      - |
        #!bin/bash
        for f in docs/tc_*.dot; do
          dotfile=`basename $f .dot`
          dot -Tsvg $f -o docs/$dotfile.svg
        done

  docs:
    desc: Show API docs
    cmds:
      - pkgsite -http :8080 & open http://localhost:8080/github.com/tombenke/{{.APPNAME}}
